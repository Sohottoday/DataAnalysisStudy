import numpy as np

# Sum / Product

# sum : 여러개의 수를 연속하여 더하는 연산(그리스 문자 시그마)
# product : 여러개의 수를 연속하여 곱하는 연산(그리스 문자 파이)

# 선형 대수(linear algebra) : 데이터 분석에 필요한 여러 계산을 돕기 위한 학문

# 데이터 유형 : scalar, vector, matrix
# scalar(스칼라) : 숫자 하나로 이루어져 있는 데이터
# vector(벡터) : 여러개의 숫자로 이루어진 데이터(data record)
# matrix(행렬) : 벡터가 여러개 있는 데이터 집합

# numpy에서 벡터를 표현할 때 벡터를 열의 개수가 하나인 2차원 배열 객체로 표현하는 것이 올바르다.
x1 = np.array([[2.1], [2.2], [2.3]])        # numpy로 벡터를 표현
# numpy에서는 1차원 배열 객체도 대부분 벡터로 인정한다.
x1 = np.array([2.1, 2.2, 2.3])      # 위와 같이 벡터로 인정되지만 출력할 때 가로로 출력된다.

# matrix : 하나의 데이터 레코드를 단독으로 벡터로 나타낼때는 하나의 열로 나타낸다.
# 복수의 데이터 레코드 집합을 행렬로 표현할 때는 하나의 데이터 레코드가 행으로 표현

# 전치 연산 : 행렬에서 가장 기본이 되는 연산. 행과 열을 바꾸는 연산
# 보통 T로 표현한다.
# 전치 연산으로 만들어진 행렬을 원래 행렬에 대한 '전치행렬' 이라고 한다.
# 벡터 x에 대한 전치 연산을 적용하여 만든 xT는 행의 수가 1인 행렬이므로 행 벡터(row vector)라고 한다.
x1 = np.array([[2.2], [3.3], [4.4], [5.5]])
print(x1)

# T는 메서드가 아니라 속성이므로 소괄호()를 붙이지 않는다.
print(x1.T)

x2 = np.array([1, 2, 3, 4])
print(x2)
print(x2.T)     # 1차원 ndarray는 전체 연산이 정의되지 않는다.

# 행렬의 행 표기와 열 표기

# 특수 벡터(0벡터, 1벡터)
## 0벡터는 모든 성분이 0으로만 구성된 벡터이며 1벡터는 1로만 구성된 벡터

# 특수 행렬(정방 행렬, 대각 행렬)
## 정방 행렬(square matrix) : 행의 개수와 열의 개수가 같은 행렬
## 대각 행렬 : numpy의 diag명령으로 생성 가능
## 단위 행렬(identity matrix) : 대각행렬 중에서 모든 대각 성분의 값이 1인 대각행렬, 대문자 I로 표현된다.
i = np.identity(3)
print(i)

i2 = np.eye(3)
print(i2)

## 대칭 행렬(symmetric matrix) : 전치 연산을 통해 얻은 전치 행렬과 원래의 행렬이 같은 경우. 단, 정방행렬만이 될 수 있다.

